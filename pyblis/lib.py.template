import ctypes as ct
import os
import sys

import numpy as np


def load_libblis():
    if sys.platform == "darwin":
        ext = ".dylib"
    elif sys.platform == "win32":
        ext = ".dll"
    else:
        ext = ".so"
    path = os.path.join(os.path.dirname(__file__), "_lib" + ext)
    return ct.CDLL(path)


libblis = load_libblis()

# GEMM
{% for T in all_types %}
pybli_{{ T.char }}gemm = libblis.pybli_{{ T.char }}gemm
pybli_{{ T.char }}gemm.argtypes = (
    ct.c_bool,          # a_trans
    ct.c_bool,          # a_conj
    ct.c_bool,          # b_trans
    ct.c_bool,          # b_conj
    ct.c_long,          # m
    ct.c_long,          # n
    ct.c_long,          # k
    {{ T.alpha_py_sig }}, # alpha
    ct.c_void_p,        # a
    ct.c_long,          # rsa
    ct.c_long,          # csa
    ct.c_void_p,        # b
    ct.c_long,          # rsb
    ct.c_long,          # csb
    {{ T.beta_py_sig }},  # beta
    ct.c_void_p,        # c
    ct.c_long,          # rsc
    ct.c_long,          # csc
    ct.c_long           # nthreads
)

def {{ T.char }}gemm(
    a, b, out=None, a_trans=False, a_conj=False,
    b_trans=False, b_conj=False, alpha=1.0, beta=0.0,
    nthreads=-1
):
    m = a.shape[0] if not a_trans else a.shape[1]
    k = a.shape[1] if not a_trans else a.shape[0]
    n = b.shape[1] if not b_trans else b.shape[0]
    k2 = b.shape[0] if not b_trans else b.shape[1]

    if k != k2:
        raise ValueError("b shape mismatch")

    if out is None:
        out = np.zeros((m, n), dtype=a.dtype)
    elif out.shape[0] != m or out.shape[1] != n:
        raise ValueError("Output shape mismatch")

    pybli_{{ T.char }}gemm(a_trans, a_conj,
              b_trans, b_conj,
              m, n, k,
              {{ T.alpha_py_call }},
              a.ctypes,
              a.strides[0] // a.itemsize,
              a.strides[1] // a.itemsize,
              b.ctypes,
              b.strides[0] // b.itemsize,
              b.strides[1] // b.itemsize,
              {{ T.beta_py_call }},
              out.ctypes,
              out.strides[0] // out.itemsize,
              out.strides[1] // out.itemsize,
              nthreads)
    return out
{% endfor %}

# SYRM
{% for T in all_types %}
pybli_{{ T.char }}syrk = libblis.pybli_{{ T.char }}syrk
pybli_{{ T.char }}syrk.argtypes = (
    ct.c_bool,          # a_trans
    ct.c_bool,          # a_conj
    ct.c_bool,          # c_upper
    ct.c_long,          # m
    ct.c_long,          # k
    {{ T.alpha_py_sig }}, # alpha
    ct.c_void_p,        # a
    ct.c_long,          # rsa
    ct.c_long,          # csa
    {{ T.beta_py_sig }},  # beta
    ct.c_void_p,        # c
    ct.c_long,          # rsc
    ct.c_long,          # csc
    ct.c_long           # nthreads
)

def {{ T.char }}syrk(
    a, out=None, a_trans=False, a_conj=False,
    out_upper=False, alpha=1.0, beta=0.0,
    nthreads=-1
):
    m = a.shape[1] if a_trans else a.shape[0]
    k = a.shape[0] if a_trans else a.shape[1]

    if out is None:
        out = np.zeros((m, m), dtype=a.dtype)
    elif out.shape[0] != m or out.shape[1] != m:
        raise ValueError("Output shape mismatch")

    pybli_{{ T.char }}syrk(
        a_trans,
        a_conj,
        out_upper,
        m,
        k,
        {{ T.alpha_py_call }},
        a.ctypes,
        a.strides[0] // a.itemsize,
        a.strides[1] // a.itemsize,
        {{ T.beta_py_call }},
        out.ctypes,
        out.strides[0] // out.itemsize,
        out.strides[1] // out.itemsize,
        nthreads
    )
    return out
{% endfor %}

# MKSYMM
{% for T in all_types %}
pybli_{{ T.char }}mksymm = libblis.pybli_{{ T.char }}mksymm
pybli_{{ T.char }}mksymm.argtypes = (
    ct.c_bool,          # a_upper
    ct.c_long,          # m
    ct.c_void_p,        # a
    ct.c_long,          # rsa
    ct.c_long,          # csa
    ct.c_long           # nthreads
)

def {{ T.char }}mksymm(a, upper=False, nthreads=-1):
    if a.shape[0] != a.shape[1]:
        raise ValueError("`a` must be a square matrix")

    m = a.shape[0]

    pybli_{{ T.char }}mksymm(
        upper,
        m,
        a.ctypes,
        a.strides[0] // a.itemsize,
        a.strides[1] // a.itemsize,
        nthreads
    )
    return a
{% endfor %}
